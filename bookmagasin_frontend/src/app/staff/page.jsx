"use client";
import React, { useState } from "react";
import { LayoutDashboard, Bell, List, Type } from "lucide-react";
import "./staff.css";

export default function StaffPage() {
  const menuItems = [
    { icon: <LayoutDashboard size={20} />, label: "Information Management" },
    { icon: <Bell size={20} />, label: "View notifications" },
    { icon: <List size={20} />, label: "View book list" },
    { icon: <Type size={20} />, label: "Process Orders" },
  ];

  const [activeIndex, setActiveIndex] = useState(0);

  return (
    <div className="staff-container">
      {/* Sidebar */}
      <aside className="sidebar">
        <div className="sidebar-header">CREATIVE TIM</div>

        <ul className="menu-list">
          {menuItems.map((item, index) => (
            <li
              key={index}
              className={`menu-item ${activeIndex === index ? "active" : ""}`}
              onClick={() => setActiveIndex(index)}
            >
              <span className="icon">{item.icon}</span>
              <span className="label">{item.label}</span>
            </li>
          ))}
        </ul>

        <div className="upgrade-section">
          <button className="upgrade-btn">UPGRADE TO PRO</button>
        </div>
      </aside>

      {/* Main content */}
      <main className="staff-content">
        {activeIndex === 0 && <InformationManagement />}
        {activeIndex === 1 && <ViewNotifications />}
        {activeIndex === 2 && <BookList />}
        {activeIndex === 3 && <ProcessOrders />}
      </main>
    </div>
  );
}

/* ----- Component 1: Information Management ----- */
function InformationManagement() {
  return (
    <div className="info-card">
      <h1>INFORMATION MANAGEMENT</h1>
      <p className="subtext">
        Trang cho ph√©p b·∫°n xem v√† c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n trong h·ªá th·ªëng.
      </p>

      <form className="info-form">
        <label>H·ªç v√† t√™n</label>
        <input type="text" defaultValue="Nguy·ªÖn VƒÉn An" />

        <label>Email</label>
        <input type="email" defaultValue="staff@example.com" />

        <label>S·ªë ƒëi·ªán tho·∫°i</label>
        <input type="text" defaultValue="0912345678" />

        <label>M·∫≠t kh·∫©u</label>
        <input type="password" defaultValue="123456" />

        <div className="button-group">
          <button type="submit" className="save-btn">üíæ L∆∞u</button>
          <button type="button" className="cancel-btn">‚ùå H·ªßy</button>
        </div>
      </form>
    </div>
  );
}

/* ----- Component 2: View Notifications ----- */
function ViewNotifications() {
  const notifications = {
    customer: [
      "Kh√°ch h√†ng Nguy·ªÖn A ƒë√£ ƒë·∫∑t h√†ng th√†nh c√¥ng.",
      "ƒê∆°n h√†ng #1234 ƒë√£ ƒë∆∞·ª£c giao.",
      "C√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i m·ªõi cho th√°ng 11.",
      "Ph·∫£n h·ªìi m·ªõi t·ª´ kh√°ch h√†ng v·ªÅ s·∫£n ph·∫©m.",
    ],
    staff: [
      "C√≥ ƒë∆°n h√†ng m·ªõi c·∫ßn x·ª≠ l√Ω.",
      "Y√™u c·∫ßu h·ªó tr·ª£ t·ª´ kh√°ch h√†ng Tr·∫ßn B.",
      "C√≥ ƒë√°nh gi√° s·∫£n ph·∫©m m·ªõi c·∫ßn duy·ªát.",
      "C·∫≠p nh·∫≠t th√¥ng tin h·ªá th·ªëng ƒë·ªãnh k·ª≥.",
    ],
    admin: [
      "S·∫£n ph·∫©m S√°ch Java c∆° b·∫£n s·∫Øp h·∫øt h√†ng.",
      "B√°o c√°o t√†i ch√≠nh th√°ng 10 ƒë√£ s·∫µn s√†ng.",
      "Th√¥ng b√°o h·ªçp qu·∫£n l√Ω nh√¢n vi√™n ng√†y 30/10.",
    ],
  };

  const [readStatus, setReadStatus] = useState({});

  const handleClick = (key) => {
    setReadStatus((prev) => ({ ...prev, [key]: true }));
  };

  return (
    <div className="info-card">
      <h1>STAFF NOTIFICATIONS</h1>
      <p className="subtext">Danh s√°ch c√°c th√¥ng b√°o quan tr·ªçng c·ªßa h·ªá th·ªëng.</p>

      {Object.entries(notifications).map(([section, messages]) => (
        <div key={section} className="notification-section">
          <h3>{section.charAt(0).toUpperCase() + section.slice(1)}</h3>
          <ul>
            {messages.map((msg, i) => (
              <li
                key={`${section}-${i}`}
                onClick={() => handleClick(`${section}-${i}`)}
                className={readStatus[`${section}-${i}`] ? "read-item" : "unread-item"}
              >
                <span
                  className={`dot ${readStatus[`${section}-${i}`] ? "read" : "unread"}`}
                ></span>
                {msg}
              </li>
            ))}
          </ul>
        </div>
      ))}
    </div>
  );
}

/* ----- Component 3: Book List ----- */
function BookList() {
  const categories = ["L·∫≠p tr√¨nh", "Kinh t·∫ø", "VƒÉn h·ªçc", "T√¢m l√Ω h·ªçc"];
  const books = {
    "L·∫≠p tr√¨nh": [
      { title: "Python c∆° b·∫£n", author: "Nguy·ªÖn VƒÉn A", price: 120000 },
      { title: "L·∫≠p tr√¨nh Web v·ªõi React", author: "Tr·∫ßn Th·ªã B", price: 180000 },
      { title: "H·ªçc Java trong 24 gi·ªù", author: "Ph·∫°m VƒÉn C", price: 99000 },
    ],
    "Kinh t·∫ø": [
      { title: "T∆∞ duy kinh t·∫ø h·ªçc", author: "Nguy·ªÖn Duy Khoa", price: 135000 },
      { title: "Cha gi√†u cha ngh√®o", author: "Robert Kiyosaki", price: 150000 },
    ],
    "VƒÉn h·ªçc": [],
    "T√¢m l√Ω h·ªçc": [ 
      { title: "ƒê·∫Øc nh√¢n t√¢m", author: "Dale Carnegie", price: 89000 },
      { title: "T√¢m l√Ω h·ªçc ƒë√°m ƒë√¥ng", author: "Gustave Le Bon", price: 110000 },
    ],
  };

  const [selectedCategory, setSelectedCategory] = useState("L·∫≠p tr√¨nh");
  const [sortOrder, setSortOrder] = useState("asc");
  const [selectedBook, setSelectedBook] = useState(null);

  const categoryBooks = books[selectedCategory] || [];
  const sortedBooks = [...categoryBooks].sort((a, b) =>
    sortOrder === "asc" ? a.price - b.price : b.price - a.price
  );

  return (
    <div className="info-card">
      <h1>BOOK LIST</h1>
      <p className="subtext">
        Danh s√°ch c√°c cu·ªën s√°ch ƒë∆∞·ª£c ph√¢n lo·∫°i theo t·ª´ng danh m·ª•c.
      </p>

      <div className="filter-bar">
        <div className="select-group">
          <label>Danh m·ª•c:</label>
          <select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
          >
            {categories.map((cat) => (
              <option key={cat}>{cat}</option>
            ))}
          </select>
        </div>

        <div className="select-group">
          <label>S·∫Øp x·∫øp theo gi√°:</label>
          <select
            value={sortOrder}
            onChange={(e) => setSortOrder(e.target.value)}
          >
            <option value="asc">TƒÉng d·∫ßn</option>
            <option value="desc">Gi·∫£m d·∫ßn</option>
          </select>
        </div>
      </div>

      {sortedBooks.length === 0 ? (
        <div className="empty-message">Danh m·ª•c tr·ªëng</div>
      ) : (
        <div className="book-grid">
          {sortedBooks.map((book, index) => (
            <div
              key={index}
              className="book-card"
              onClick={() => setSelectedBook(book)}
            >
              <h3>{book.title}</h3>
              <p className="author">T√°c gi·∫£: {book.author}</p>
              <p className="price">{book.price.toLocaleString()}‚Ç´</p>
            </div>
          ))}
        </div>
      )}

      {selectedBook && (
        <div className="book-modal" onClick={() => setSelectedBook(null)}>
          <div className="book-modal-content" onClick={(e) => e.stopPropagation()}>
            <h2>{selectedBook.title}</h2>
            <p><strong>T√°c gi·∫£:</strong> {selectedBook.author}</p>
            <p><strong>Gi√°:</strong> {selectedBook.price.toLocaleString()}‚Ç´</p>
            <p>
              ƒê√¢y l√† cu·ªën s√°ch trong danh m·ª•c <b>{selectedCategory}</b>.
            </p>
            <button onClick={() => setSelectedBook(null)}>ƒê√≥ng</button>
          </div>
        </div>
      )}
    </div>
  );
}

/* ----- Component 4: Process Orders ----- */
function ProcessOrders() {
  return (
    <div className="info-card">
      <h1>PROCESS ORDERS</h1>
      <p className="subtext">Trang x·ª≠ l√Ω ƒë∆°n h√†ng cho nh√¢n vi√™n.</p>
    </div>
  );
}
